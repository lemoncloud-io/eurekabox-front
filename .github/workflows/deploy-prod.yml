name: deploy-prod
on:
    push:
        branches:
            - main

jobs:
    changes:
        name: Check changed projects
        runs-on: ubuntu-latest
        permissions:
            pull-requests: read
        outputs:
            web: ${{ steps.filter.outputs.web }}
            projects: ${{ steps.filter.outputs.changes }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.LEMON_BOT_TOKEN }}
            - uses: dorny/paths-filter@v2
              id: filter
              with:
                  base: 'main'
                  filters: |
                      web:
                          - 'apps/web/**'
                          - 'assets/**'
                          - 'libs/**'

    get-version:
        needs: changes
        if: ${{ fromJson(needs.changes.outputs.projects)[0] != null }}
        name: Build and Set Version
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
        outputs:
            root-version: ${{ steps.get-root-version.outputs.root-version }}
            web-version: ${{ steps.get-web-version.outputs.web-version }}
        steps:
            - name: Check out a copy of the repo
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.LEMON_BOT_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version-file: '.nvmrc'

            - name: Get Yarn cache path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                  path: |
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                      node_modules
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-

            - name: Install dependencies
              if: steps.cache-dependencies.outputs.cache-hit != 'true'
              run: yarn install --frozen-lockfile

            - name: Configure git
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"

            - name: Get Root Version
              id: get-root-version
              run: |
                  if [ -f "package.json" ]; then
                    ROOT_VERSION=$(node -p "require('./package.json').version")
                    echo "root-version=${ROOT_VERSION}" >> $GITHUB_OUTPUT
                  fi

            - name: Get Web Version
              if: ${{ needs.changes.outputs.web == 'true' }}
              id: get-web-version
              run: |
                  if [ -f "apps/web/package.json" ]; then
                    WEB_VERSION=$(node -p "require('./apps/web/package.json').version")
                    echo "web-version=${WEB_VERSION}" >> $GITHUB_OUTPUT
                  fi

    build-and-deploy:
        needs: [changes, get-version]
        runs-on: ubuntu-latest
        name: Build and Deploy
        strategy:
            fail-fast: false
            matrix:
                project: [web]
                include:
                    - project: web
                      version: ${{ needs.get-version.outputs.web-version }}
                      should_run: ${{ needs.changes.outputs.web == 'true' }}

        steps:
            - name: Skip if no changes
              if: ${{ matrix.should_run }}
              run: echo "Processing ${{ matrix.project }}"

            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.LEMON_BOT_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version-file: '.nvmrc'

            - name: Get Yarn cache path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                  path: |
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                      node_modules
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-

            - name: Install dependencies
              if: steps.cache-dependencies.outputs.cache-hit != 'true'
              run: yarn install --frozen-lockfile

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

            - name: Deploy to PROD
              run: |
                  chmod +x scripts/deploy-${{ matrix.project }}.sh
                  yarn ${{ matrix.project }}:deploy:prod

    notity-slack:
        needs: [changes, get-version, build-and-deploy]
        if: ${{ fromJson(needs.changes.outputs.projects)[0] != null }}
        name: Notify Slack
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
        steps:
            - uses: release-drafter/release-drafter@v5
              id: release-drafted
              with:
                  publish: true
                  version: ${{ needs.get-version.outputs.root-version }}
                  tag: ${{ needs.get-version.outputs.root-version }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Convert notes to slack body
              id: slack-body
              uses: LoveToKnow/slackify-markdown-action@v1.0.2
              with:
                  text: ${{ steps.release-drafted.outputs.body }}

            - name: Prepare Slack message
              id: slack-message
              run: |
                  BASE_MESSAGE=":eurekabox: *EurekaBox 운영 환경 배포 완료*\n\n"
                  DEPLOY_MESSAGE=""

                  if [[ "${{ needs.changes.outputs.web }}" == "true" ]]; then
                      DEPLOY_MESSAGE="*<https://box.eureka.codes/|운영 서버> 배포되었습니다. v${{ needs.get-version.outputs.web-version }}*"
                  else
                      DEPLOY_MESSAGE="변경사항이 없습니다."
                  fi

                  echo "text=${BASE_MESSAGE}${DEPLOY_MESSAGE}" >> $GITHUB_OUTPUT

            - name: Post to a Slack channel
              id: post-slack
              uses: slackapi/slack-github-action@v1.25.0
              with:
                  channel-id: ${{ secrets.EUREKACODES_CHANNEL }}
                  payload: |
                      {
                          "text": "EUREKABOX 운영 배포 알림",
                          "blocks": [
                      		  {
                                  "type": "section",
                                  "text": {
                                      "type": "mrkdwn",
                                      "text": "${{ steps.slack-message.outputs.text }}"
                                  }
                              },
                              {
                                  "type": "section",
                                  "text": {
                                      "type": "mrkdwn",
                                      "text": "${{ steps.slack-body.outputs.text }}"
                                  }
                              }
                          ]
                      }
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.RELEASE_BOT_TOKEN }}
